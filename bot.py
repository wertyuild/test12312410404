import logging
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from keyboards import get_main_menu_keyboard, get_subscription_keyboard
from handlers import register_user_handlers
from admin_handlers import register_admin_handlers
from config import STARS_PER_REFERRAL

API_TOKEN = '7991051885:AAGgVt3IlyQNjDaCfLYxOsUtfQpBu7HHqsA'
SUBGRAM_API_KEY = 'e2851fc57f083719da32f7c8a99e4c9ee7a0b3d4c1313cb4e631aa7fb2ab203f'
SUBGRAM_REQUEST_OP_URL = 'https://api.subgram.ru/request-op/'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- Subgram API ---
class SubgramAPI:
    def __init__(self):
        self.api_key = SUBGRAM_API_KEY
        self.headers = {
            'Auth': self.api_key,
            'Content-Type': 'application/json'
        }

    async def request_subscription_block(self, user_id: int, chat_id: int, first_name: str = None, language_code: str = 'ru', is_premium: bool = False) -> dict:
        data = {
            "UserId": str(user_id),
            "ChatId": str(chat_id),
            "first_name": first_name,
            "language_code": language_code,
            "Premium": is_premium,
            "MaxOP": 10,
            "action": "subscribe"
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(SUBGRAM_REQUEST_OP_URL, headers=self.headers, json=data) as response:
                    resp_text = await response.text()
                    print(f"[SubgramAPI][request_subscription_block] –û—Ç–≤–µ—Ç: {resp_text}")
                    if response.status == 200:
                        return await response.json()
                    else:
                        return {}
        except Exception as e:
            logging.error(f"Subgram API error: {e}")
            return {}

    def is_user_fully_subscribed(self, subscription_data: dict) -> bool:
        if not subscription_data or subscription_data.get('status') != 'ok':
            return False
        sponsors = subscription_data.get('additional', {}).get('sponsors', [])
        return all(s.get('status') == 'subscribed' for s in sponsors)

    def get_unsubscribed_channels(self, subscription_data: dict):
        sponsors = subscription_data.get('additional', {}).get('sponsors', [])
        return [
            {
                'link': s['link'],
                'name': s.get('resource_name', '–ö–∞–Ω–∞–ª'),
                'type': s.get('type', 'channel')
            }
            for s in sponsors if s.get('status') != 'subscribed'
        ]

subgram = SubgramAPI()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ /start ---
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    language_code = message.from_user.language_code or 'ru'
    is_premium = getattr(message.from_user, 'is_premium', False)
    subscription_data = await subgram.request_subscription_block(
        user_id=user_id,
        chat_id=chat_id,
        first_name=first_name,
        language_code=language_code,
        is_premium=is_premium
    )
    if subgram.is_user_fully_subscribed(subscription_data):
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç!\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        unsubscribed = subgram.get_unsubscribed_channels(subscription_data)
        if unsubscribed:
            channels_list = '\n'.join([
                f"{'üì¢' if c['type']=='channel' else 'ü§ñ'} <a href='{c['link']}'>{c['name']}</a>" for c in unsubscribed
            ])
            text = (
                f"<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç!</b>\n\n"
                f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ:\n\n"
                f"{channels_list}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
            )
            await message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=get_subscription_keyboard(unsubscribed)
            )
        else:
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç StarsovEarn!\n\n"
                f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π.\n\n"
                f"‚≠ê –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{STARS_PER_REFERRAL} –∑–≤–µ–∑–¥</b>!\n\n"
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n"
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Yawinka",
                parse_mode="HTML"
            )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ---
@dp.callback_query_handler(lambda c: c.data in ['check_subscription', 'subgram-op'])
async def process_check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    first_name = callback_query.from_user.first_name
    language_code = callback_query.from_user.language_code or 'ru'
    is_premium = getattr(callback_query.from_user, 'is_premium', False)
    subscription_data = await subgram.request_subscription_block(
        user_id=user_id,
        chat_id=chat_id,
        first_name=first_name,
        language_code=language_code,
        is_premium=is_premium
    )
    if subgram.is_user_fully_subscribed(subscription_data):
        await callback_query.message.edit_text(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç!\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        unsubscribed = subgram.get_unsubscribed_channels(subscription_data)
        if unsubscribed:
            channels_list = '\n'.join([
                f"{'üì¢' if c['type']=='channel' else 'ü§ñ'} <a href='{c['link']}'>{c['name']}</a>" for c in unsubscribed
            ])
            text = (
                f"<b>üöÄ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
                f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ:\n\n"
                f"{channels_list}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
            )
            await callback_query.message.edit_text(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=get_subscription_keyboard(unsubscribed)
            )
        else:
            await callback_query.message.edit_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç StarsovEarn!\n\n"
                f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π.\n\n"
                f"‚≠ê –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{STARS_PER_REFERRAL} –∑–≤–µ–∑–¥</b>!\n\n"
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n"
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Yawinka",
                parse_mode="HTML"
            )
    await callback_query.answer()

# --- –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ---
@dp.message_handler(lambda m: m.text in ["üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üí∞ –ë–∞–ª–∞–Ω—Å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí∏ –í—ã–≤–æ–¥", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"])
async def block_if_not_subscribed(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    language_code = message.from_user.language_code or 'ru'
    is_premium = getattr(message.from_user, 'is_premium', False)
    subscription_data = await subgram.request_subscription_block(
        user_id=user_id,
        chat_id=chat_id,
        first_name=first_name,
        language_code=language_code,
        is_premium=is_premium
    )
    if not subgram.is_user_fully_subscribed(subscription_data):
        unsubscribed = subgram.get_unsubscribed_channels(subscription_data)
        if unsubscribed:
            channels_list = '\n'.join([
                f"{'üì¢' if c['type']=='channel' else 'ü§ñ'} <a href='{c['link']}'>{c['name']}</a>" for c in unsubscribed
            ])
            text = (
                f"<b>üöÄ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ:</b>\n\n"
                f"{channels_list}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> üëá"
            )
            await message.answer(
                text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=get_subscription_keyboard(unsubscribed)
            )
        else:
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç StarsovEarn!\n\n"
                f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π.\n\n"
                f"‚≠ê –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{STARS_PER_REFERRAL} –∑–≤–µ–∑–¥</b>!\n\n"
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n"
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Yawinka",
                parse_mode="HTML"
            )
        return  # –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å—Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
register_user_handlers(dp)
register_admin_handlers(dp)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 