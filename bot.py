import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Subgram API

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏) ---
TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢_–¢–û–ö–ï–ù"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
SUBGRAM_API_KEY = "–í–ê–®_SUBGRAM_API_–ö–õ–Æ–ß"      # –ü–æ–ª—É—á–∏—Ç–µ –≤ @subgram_officialbot

# –§–ª–∞–≥: True, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Subgram –ë–ï–ó —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
# False, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –í–ú–ï–°–¢–ï —Å —Ç–æ–∫–µ–Ω–æ–º.
# –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –ø–æ–¥–∫–ª—é—á–∞–ª–∏ –±–æ—Ç–∞ –∫ Subgram.
SUBGRAM_BOT_ADDED_WITHOUT_TOKEN = False 

# URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Subgram API
SUBGRAM_REQUEST_OP_URL = "https://api.subgram.ru/request-op/"
# ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Subgram API ---
async def request_op(
    user_id: int,
    chat_id: int,
    gender: str = None,
    first_name: str = None,
    language_code: str = None,
    is_premium: bool = None,
    max_op: int = None,
    action: str = "subscribe",
    exclude_channel_ids: list = None
) -> tuple[str, int, list, dict]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Subgram API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (status, code, links, additional_data).
    """
    payload = {
        "UserId": str(user_id),
        "ChatId": str(chat_id),
        "action": action
    }
    
    headers = {
        "Auth": SUBGRAM_API_KEY,
        "Content-Type": "application/json"
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    if SUBGRAM_BOT_ADDED_WITHOUT_TOKEN:
        if first_name is not None:
            payload["first_name"] = first_name
        if language_code is not None:
            payload["language_code"] = language_code
        if is_premium is not None:
            payload["Premium"] = is_premium # Subgram –æ–∂–∏–¥–∞–µ—Ç 'Premium' —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if gender is not None:
        payload["Gender"] = gender
    if max_op is not None:
        payload["MaxOP"] = max_op
    if exclude_channel_ids is not None:
        payload["exclude_channel_ids"] = exclude_channel_ids

    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Subgram: {payload}")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(SUBGRAM_REQUEST_OP_URL, headers=headers, json=payload) as response:
                response.raise_for_status()  # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ 4xx/5xx
                data = await response.json()
                
                status = data.get("status")
                code = data.get("code")
                links = data.get("links", [])
                additional = data.get("additional", {})

                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Subgram (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}): status={status}, code={code}")
                return status, code, links, additional

        except aiohttp.ClientConnectorError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Subgram API: {e}")
            return "error", 503, [], {} # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        except aiohttp.ClientResponseError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ –æ—Ç Subgram API: {e.status} - {e.message}")
            return "error", e.status, [], {} # –û—à–∏–±–∫–∞ API
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Subgram: {e}")
            return "error", 500, [], {} # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Subgram API.
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_first_name = message.from_user.first_name
    user_language_code = message.from_user.language_code
    user_is_premium = message.from_user.is_premium

    status, code, links, additional = await request_op(
        user_id=user_id,
        chat_id=chat_id,
        first_name=user_first_name,
        language_code=user_language_code,
        is_premium=user_is_premium
    )

    if status == 'ok' and code == 200:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω. üëç")
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    elif status == 'warning':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤
        if links:
            # –ï—Å–ª–∏ Subgram –ø—Ä–∏—Å–ª–∞–ª —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            text_to_send = "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:"
            keyboard = InlineKeyboardBuilder()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º additional['sponsors'] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            for sponsor in additional.get('sponsors', []):
                if sponsor.get('status') == 'unsubscribed': # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    link = sponsor.get('link')
                    name = sponsor.get('resource_name', "–ö–∞–Ω–∞–ª/–ë–æ—Ç") # Fallback name
                    if link:
                        text_to_send += f"\n- <a href='{link}'>{name}</a>"
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
                        # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–æ —ç—Ç–æ —á–∞—Å—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
            keyboard.button(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="subgram_check_again")
            
            await message.answer(
                text_to_send,
                reply_markup=keyboard.as_markup(),
                disable_web_page_preview=True # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            )
        else:
            # –ï—Å–ª–∏ Subgram –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Å—Å—ã–ª–∫–∏ (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π)
            await message.answer(
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã."
            )
    elif status == 'gender':
        # Subgram –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ú—É–∂—Å–∫–æ–π", callback_data="subgram_gender_male")
        keyboard.button(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="subgram_gender_female")
        await message.answer(
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=keyboard.as_markup()
        )
    else:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query(F.data.startswith("subgram"))
async def subgram_callback_query(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    user_first_name = callback_query.from_user.first_name
    user_language_code = callback_query.from_user.language_code
    user_is_premium = callback_query.from_user.is_premium

    if callback_query.data == "subgram_check_again":
        await callback_query.message.edit_text("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        status, code, links, additional = await request_op(
            user_id=user_id,
            chat_id=chat_id,
            first_name=user_first_name,
            language_code=user_language_code,
            is_premium=user_is_premium
        )

        if status == 'ok' and code == 200:
            await callback_query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω. üëç")
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
        elif status == 'warning':
            # –°–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            if links:
                text_to_send = "–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:"
                keyboard = InlineKeyboardBuilder()
                for sponsor in additional.get('sponsors', []):
                    if sponsor.get('status') == 'unsubscribed':
                        link = sponsor.get('link')
                        name = sponsor.get('resource_name', "–ö–∞–Ω–∞–ª/–ë–æ—Ç")
                        if link:
                            text_to_send += f"\n- <a href='{link}'>{name}</a>"
                keyboard.button(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="subgram_check_again")
                await callback_query.message.edit_text(
                    text_to_send,
                    reply_markup=keyboard.as_markup(),
                    disable_web_page_preview=True
                )
            else:
                await callback_query.message.edit_text(
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã."
                )
        elif status == 'gender':
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∏–ª—Å—è –ø–æ–ª (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–ú—É–∂—Å–∫–æ–π", callback_data="subgram_gender_male")
            keyboard.button(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="subgram_gender_female")
            await callback_query.message.edit_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    elif callback_query.data.startswith("subgram_gender_"):
        gender = callback_query.data.split("_")[2]
        await callback_query.message.edit_text(f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø–æ–ª '{gender}' —É—á—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É...")

        status, code, links, additional = await request_op(
            user_id=user_id,
            chat_id=chat_id,
            gender=gender, # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª
            first_name=user_first_name,
            language_code=user_language_code,
            is_premium=user_is_premium
        )

        if status == 'ok' and code == 200:
            await callback_query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω. üëç")
        elif status == 'warning':
            if links:
                text_to_send = "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:"
                keyboard = InlineKeyboardBuilder()
                for sponsor in additional.get('sponsors', []):
                    if sponsor.get('status') == 'unsubscribed':
                        link = sponsor.get('link')
                        name = sponsor.get('resource_name', "–ö–∞–Ω–∞–ª/–ë–æ—Ç")
                        if link:
                            text_to_send += f"\n- <a href='{link}'>{name}</a>"
                keyboard.button(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="subgram_check_again")
                await callback_query.message.edit_text(
                    text_to_send,
                    reply_markup=keyboard.as_markup(),
                    disable_web_page_preview=True
                )
            else:
                await callback_query.message.edit_text(
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã."
                )
        else:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        await callback_query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
